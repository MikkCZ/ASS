1) check parameters (IP, port and name)
2) create threads:
	for sending (create for every message ?)
	for receiving
	for reading from console
3) login to server
	get socket
	send/get init messages
4) live

== threads: ==
1) for sending
	in a loop (one iteration every 1 second) send message from the beginning of the common message queue
2) for receiving
	wait for server response and parse it
		logout
		print to the screen (stdin/stderr)
		enqueue (to the beginning of the queue) receive confirmation (check if there isn't the same at the time)
		destroy a message from the beginning of the queue if a receive confirmation comes from the server
		drop ?
3) for reading from console
	in a loop read new messages from the console
		name:message
			create a message in desired format and enqueue it
		logout command
			logout procedure

== requirements: ==
common socket
message queue (common for all threads)
